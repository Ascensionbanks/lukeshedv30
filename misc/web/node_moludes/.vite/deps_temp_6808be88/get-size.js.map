{
  "version": 3,
  "sources": ["../../get-size/get-size.js"],
  "sourcesContent": ["/*!\n * Infinite Scroll v2.0.4\n * measure size of elements\n * MIT license\n */\n\n( function( window, factory ) {\n  if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.getSize = factory();\n  }\n\n} )( window, function factory() {\n\n// -------------------------- helpers -------------------------- //\n\n// get a number from a string, not a percentage\nfunction getStyleSize( value ) {\n  let num = parseFloat( value );\n  // not a percent like '100%', and a number\n  let isValid = value.indexOf('%') == -1 && !isNaN( num );\n  return isValid && num;\n}\n\n// -------------------------- measurements -------------------------- //\n\nlet measurements = [\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'paddingBottom',\n  'marginLeft',\n  'marginRight',\n  'marginTop',\n  'marginBottom',\n  'borderLeftWidth',\n  'borderRightWidth',\n  'borderTopWidth',\n  'borderBottomWidth',\n];\n\nlet measurementsLength = measurements.length;\n\nfunction getZeroSize() {\n  let size = {\n    width: 0,\n    height: 0,\n    innerWidth: 0,\n    innerHeight: 0,\n    outerWidth: 0,\n    outerHeight: 0,\n  };\n  measurements.forEach( ( measurement ) => {\n    size[ measurement ] = 0;\n  } );\n  return size;\n}\n\n// -------------------------- getSize -------------------------- //\n\nfunction getSize( elem ) {\n  // use querySeletor if elem is string\n  if ( typeof elem == 'string' ) elem = document.querySelector( elem );\n\n  // do not proceed on non-objects\n  let isElement = elem && typeof elem == 'object' && elem.nodeType;\n  if ( !isElement ) return;\n\n  let style = getComputedStyle( elem );\n\n  // if hidden, everything is 0\n  if ( style.display == 'none' ) return getZeroSize();\n\n  let size = {};\n  size.width = elem.offsetWidth;\n  size.height = elem.offsetHeight;\n\n  let isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';\n\n  // get all measurements\n  measurements.forEach( ( measurement ) => {\n    let value = style[ measurement ];\n    let num = parseFloat( value );\n    // any 'auto', 'medium' value will be 0\n    size[ measurement ] = !isNaN( num ) ? num : 0;\n  } );\n\n  let paddingWidth = size.paddingLeft + size.paddingRight;\n  let paddingHeight = size.paddingTop + size.paddingBottom;\n  let marginWidth = size.marginLeft + size.marginRight;\n  let marginHeight = size.marginTop + size.marginBottom;\n  let borderWidth = size.borderLeftWidth + size.borderRightWidth;\n  let borderHeight = size.borderTopWidth + size.borderBottomWidth;\n\n  // overwrite width and height if we can get it from style\n  let styleWidth = getStyleSize( style.width );\n  if ( styleWidth !== false ) {\n    size.width = styleWidth +\n      // add padding and border unless it's already including it\n      ( isBorderBox ? 0 : paddingWidth + borderWidth );\n  }\n\n  let styleHeight = getStyleSize( style.height );\n  if ( styleHeight !== false ) {\n    size.height = styleHeight +\n      // add padding and border unless it's already including it\n      ( isBorderBox ? 0 : paddingHeight + borderHeight );\n  }\n\n  size.innerWidth = size.width - ( paddingWidth + borderWidth );\n  size.innerHeight = size.height - ( paddingHeight + borderHeight );\n\n  size.outerWidth = size.width + marginWidth;\n  size.outerHeight = size.height + marginHeight;\n\n  return size;\n}\n\nreturn getSize;\n\n} );\n"],
  "mappings": ";;;;;AAAA;AAAA;AAMA,KAAE,SAAUA,SAAQ,SAAU;AAC5B,UAAK,OAAO,UAAU,YAAY,OAAO,SAAU;AAEjD,eAAO,UAAU,QAAQ;AAAA,MAC3B,OAAO;AAEL,QAAAA,QAAO,UAAU,QAAQ;AAAA,MAC3B;AAAA,IAEF,GAAK,QAAQ,SAAS,UAAU;AAKhC,eAAS,aAAc,OAAQ;AAC7B,YAAI,MAAM,WAAY,KAAM;AAE5B,YAAI,UAAU,MAAM,QAAQ,GAAG,KAAK,MAAM,CAAC,MAAO,GAAI;AACtD,eAAO,WAAW;AAAA,MACpB;AAIA,UAAI,eAAe;AAAA,QACjB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,UAAI,qBAAqB,aAAa;AAEtC,eAAS,cAAc;AACrB,YAAI,OAAO;AAAA,UACT,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,YAAY;AAAA,UACZ,aAAa;AAAA,UACb,YAAY;AAAA,UACZ,aAAa;AAAA,QACf;AACA,qBAAa,QAAS,CAAE,gBAAiB;AACvC,eAAM,WAAY,IAAI;AAAA,QACxB,CAAE;AACF,eAAO;AAAA,MACT;AAIA,eAAS,QAAS,MAAO;AAEvB,YAAK,OAAO,QAAQ;AAAW,iBAAO,SAAS,cAAe,IAAK;AAGnE,YAAI,YAAY,QAAQ,OAAO,QAAQ,YAAY,KAAK;AACxD,YAAK,CAAC;AAAY;AAElB,YAAI,QAAQ,iBAAkB,IAAK;AAGnC,YAAK,MAAM,WAAW;AAAS,iBAAO,YAAY;AAElD,YAAI,OAAO,CAAC;AACZ,aAAK,QAAQ,KAAK;AAClB,aAAK,SAAS,KAAK;AAEnB,YAAI,cAAc,KAAK,cAAc,MAAM,aAAa;AAGxD,qBAAa,QAAS,CAAE,gBAAiB;AACvC,cAAI,QAAQ,MAAO,WAAY;AAC/B,cAAI,MAAM,WAAY,KAAM;AAE5B,eAAM,WAAY,IAAI,CAAC,MAAO,GAAI,IAAI,MAAM;AAAA,QAC9C,CAAE;AAEF,YAAI,eAAe,KAAK,cAAc,KAAK;AAC3C,YAAI,gBAAgB,KAAK,aAAa,KAAK;AAC3C,YAAI,cAAc,KAAK,aAAa,KAAK;AACzC,YAAI,eAAe,KAAK,YAAY,KAAK;AACzC,YAAI,cAAc,KAAK,kBAAkB,KAAK;AAC9C,YAAI,eAAe,KAAK,iBAAiB,KAAK;AAG9C,YAAI,aAAa,aAAc,MAAM,KAAM;AAC3C,YAAK,eAAe,OAAQ;AAC1B,eAAK,QAAQ;AAAA,WAET,cAAc,IAAI,eAAe;AAAA,QACvC;AAEA,YAAI,cAAc,aAAc,MAAM,MAAO;AAC7C,YAAK,gBAAgB,OAAQ;AAC3B,eAAK,SAAS;AAAA,WAEV,cAAc,IAAI,gBAAgB;AAAA,QACxC;AAEA,aAAK,aAAa,KAAK,SAAU,eAAe;AAChD,aAAK,cAAc,KAAK,UAAW,gBAAgB;AAEnD,aAAK,aAAa,KAAK,QAAQ;AAC/B,aAAK,cAAc,KAAK,SAAS;AAEjC,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,IAEP,CAAE;AAAA;AAAA;",
  "names": ["window"]
}
